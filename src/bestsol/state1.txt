 /* eslint-disable @typescript-eslint/no-unused-vars */
 import { Answer, AnsweredQuestion, Question, Option } from './questions';
 import { useAsyncReducer, noEffects } from './hooks/useAsyncReducer';
 import React from 'react';

 export interface GameInProgressState {
   tag: 'in_progress';
   answeredQuestions: Array<AnsweredQuestion>;
   currentQuestion: Question;
   currentAnswer?: Answer;
   nextQuestions: Array<Question>;
 }

 export interface GameEndState {
   tag: 'ended';
   answeredQuestions: Array<AnsweredQuestion>;
 }

 type Action =
   | { type: 'ANSWER_QUESTION'; answer: Answer }
   | { type: 'NEXT_QUESTION'; question: Question }
   | { type: 'RESTART_GAME' };

 export function gameInProgressReducer(
   state: GameInProgressState,
   action: Action
 ): { state: GameInProgressState; effects: Array<Promise<Array<Action>>> } {
   switch (action.type) {
     case 'ANSWER_QUESTION':
       const answeredQuestion: AnsweredQuestion = {
         question: state.currentQuestion,
         answer: action.answer,
       };
       const answeredQuestions = [...state.answeredQuestions, answeredQuestion];

       const nextState: GameInProgressState = {
         ...state,
         answeredQuestions,
         currentAnswer: action.answer,
       };
       const effects = [
         new Promise<Array<Action>>((resolve) =>
           setTimeout(() => {
             resolve([
               { type: 'NEXT_QUESTION', question: state.nextQuestions[0] },
             ]);
           }, 1500)
         ),
       ];
       return { state: nextState, effects };

     case 'NEXT_QUESTION':
       const [nextQuestion, ...remainingQuestions] = state.nextQuestions;
       const updatedState: GameInProgressState = {
         ...state,
         currentQuestion: action.question,
         currentAnswer: undefined,
         nextQuestions: remainingQuestions,
       };
       return noEffects(updatedState);

     case 'RESTART_GAME':
       const initialState: GameInProgressState = {
         tag: 'in_progress',
         answeredQuestions: [],
         currentQuestion: state.nextQuestions[0],
         currentAnswer: undefined,
         nextQuestions: state.nextQuestions.slice(1),
       };
       return noEffects(initialState);

     default:
       return noEffects(state);
   }
 }

 export function useGameInProgressReducer(): [
   GameInProgressState,
   React.Dispatch<Action>
 ] {
   
    design initial questions
   const exampleQuestion1: Question = {
     correctOption: Option.A,
     optionA: {
       title: 'Iran',
       answer: 'Tehran',
     },
     optionB: {
       title: 'Austria',
       answer: 'Wien',
     },
     optionC: {
       title: 'Azerbaijan',
       answer: 'Baku',
     },
     optionD: {
       title: 'Bahamas',
       answer: 'Nassau',
     },
   };

   const initialState: GameInProgressState = {
     tag: 'in_progress',
     answeredQuestions: [],
     currentQuestion: exampleQuestion1,
     currentAnswer: undefined,
     nextQuestions: [],
   };

   const [state, dispatch] = useAsyncReducer<GameInProgressState, Action>(
     initialState,
     gameInProgressReducer
   );

   return [state, dispatch];
 }
